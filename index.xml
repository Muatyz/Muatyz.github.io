<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>无处惹尘埃</title>
    <link>https://Muatyz.github.io/</link>
    <description>Recent content on 无处惹尘埃</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Muartz</copyright>
    <lastBuildDate>Sun, 23 Jun 2024 00:18:06 +0800</lastBuildDate><atom:link href="https://Muatyz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solidworks 安装方法</title>
      <link>https://Muatyz.github.io/posts/cs/solidworks/</link>
      <pubDate>Wed, 18 Oct 2023 12:20:21 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/cs/solidworks/</guid>
      <description>记录在个人电脑上安装 Solidworks 踩过的坑</description>
    </item>
    
    <item>
      <title>博客使用技巧</title>
      <link>https://Muatyz.github.io/posts/cs/skills/</link>
      <pubDate>Fri, 05 May 2023 12:20:21 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/cs/skills/</guid>
      <description>记录一些经常用得到但是又很难记住的 Web 技巧</description>
    </item>
    
    <item>
      <title>A Granular Physics-Based View of Fault Friction Experiments</title>
      <link>https://Muatyz.github.io/posts/read/sonic/stickslip/a-granular-physics-based-view-of-fault-friction-experiments/</link>
      <pubDate>Sun, 23 Jun 2024 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/stickslip/a-granular-physics-based-view-of-fault-friction-experiments/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rate- and state-dependent friction (RSF) equations are commonly used to describe the time-dependent frictional response of &lt;strong&gt;fault gouge&lt;/strong&gt; to perturbations in sliding velocity.
Among the better-known versions are the Aging and Slip laws for the evolution of state. Although the Slip law is more successful, neither can predict all the robust features of lab data. RSF laws are also empirical, and their micromechanical origin is a matter of much debate. Here we use a granular physics-based model to explore the extent to which RSF behavior, as observed in rock and gouge friction experiments, can be explained by the response of a granular gouge layer with time-independent properties at the contact scale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与速率和状态相关的摩擦（RSF）方程常用于描述&lt;strong&gt;断层破碎带&lt;/strong&gt;对滑动速度扰动的与时间相关的摩擦响应。
其中比较著名的是状态演化的老化定律和滑移定律。虽然滑动定律更为成功，但两者都无法预测实验室数据的所有稳健特征。RSF 法则也是经验性的，其微观机械起源还存在很多争议。在这里，我们使用一个基于颗粒物理学的模型来探索岩石和沟槽摩擦实验中观察到的 RSF 行为在多大程度上可以通过在接触尺度上具有与时间无关特性的粒状沟槽层的响应来解释。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2024 年度随笔</title>
      <link>https://Muatyz.github.io/posts/life/2024-document/</link>
      <pubDate>Mon, 20 May 2024 00:18:15 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/life/2024-document/</guid>
      <description>&lt;h1 id=&#34;5-月&#34;&gt;5 月&lt;/h1&gt;
&lt;h2 id=&#34;0520&#34;&gt;05.20&lt;/h2&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;
&lt;p&gt;完成作业&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新阅读有关stick-slip 的声学文章, 做好实验准备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阅读老师发的力学方面的新文章&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装实验室的架子&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;6-月&#34;&gt;6 月&lt;/h1&gt;
&lt;h2 id=&#34;0602&#34;&gt;06.02&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;答辩讲稿&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;1: 各位老师和同学们大家好, 我的毕业论文所研究的题目是 &amp;ldquo;颗粒介质中的超声波传播&amp;rdquo;, 我的指导老师是原交叉所的王宇杰老师.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2: 接下来我将分别从 &amp;ldquo;研究背景&amp;rdquo;, &amp;ldquo;研究方法与成果&amp;rdquo;, &amp;ldquo;总结&amp;rdquo; 三个方面来汇报我的毕业论文工作, 请各位老师批评指正.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Effects of acoustic waves on stick–slip in granular media and implications for earthquakes</title>
      <link>https://Muatyz.github.io/posts/read/sonic/stickslip/effects-of-acoustic-waves-on-stick-slip-in-granular-media/</link>
      <pubDate>Mon, 13 May 2024 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/stickslip/effects-of-acoustic-waves-on-stick-slip-in-granular-media/</guid>
      <description>声波对颗粒介质粘滑的影响及对地震的影响</description>
    </item>
    
    <item>
      <title>Understanding dynamic friction through spontaneously evolving laboratory earthquakes</title>
      <link>https://Muatyz.github.io/posts/read/sonic/stickslip/understanding-dynamic-friction-through-spontaneously-evolving-lab-earthquakes/</link>
      <pubDate>Sat, 11 May 2024 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/stickslip/understanding-dynamic-friction-through-spontaneously-evolving-lab-earthquakes/</guid>
      <description>通过自发演化的实验室地震了解动态摩擦力</description>
    </item>
    
    <item>
      <title>Magnetic resonance imaging in granular flows: An overview of recent advances</title>
      <link>https://Muatyz.github.io/posts/read/granular/magnetic-resonance-in-granular-flows/</link>
      <pubDate>Fri, 19 Apr 2024 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/granular/magnetic-resonance-in-granular-flows/</guid>
      <description>对颗粒流进行核磁共振成像</description>
    </item>
    
    <item>
      <title>Theoretical study of nonlinear elastic wave propagation</title>
      <link>https://Muatyz.github.io/posts/read/sonic/nonlinearity/theoretical-study-nonlinear-elastic-wave-propagation/</link>
      <pubDate>Thu, 11 Apr 2024 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/nonlinearity/theoretical-study-nonlinear-elastic-wave-propagation/</guid>
      <description>致密颗粒介质中的过渡非线性弹性行为</description>
    </item>
    
    <item>
      <title>The Burgers Equation</title>
      <link>https://Muatyz.github.io/posts/phy/scmp/burgers-equation/</link>
      <pubDate>Mon, 08 Apr 2024 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/scmp/burgers-equation/</guid>
      <description>节选自 Nonlinear Acoustics 有关推导 Burgers 方程的内容.</description>
    </item>
    
    <item>
      <title>The physical mechanisms of induced earthquakes</title>
      <link>https://Muatyz.github.io/posts/read/sonic/stickslip/the-physical-mechanisms-pf-induced-earthquakes/</link>
      <pubDate>Fri, 19 Jan 2024 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/stickslip/the-physical-mechanisms-pf-induced-earthquakes/</guid>
      <description>寒假推荐阅读文章</description>
    </item>
    
    <item>
      <title>Sounds of Failure: Passive Acoustic Measurements of Excited Vibrational Modes</title>
      <link>https://Muatyz.github.io/posts/read/sonic/stickslip/sounds-of-failure/</link>
      <pubDate>Sun, 07 Jan 2024 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/stickslip/sounds-of-failure/</guid>
      <description>监听滞滑过程的受激模态密度</description>
    </item>
    
    <item>
      <title>Nonlinear elasticity of granular media</title>
      <link>https://Muatyz.github.io/posts/read/sonic/nonlinearity/nonlinear-elasticity-of-granular-media/</link>
      <pubDate>Wed, 03 Jan 2024 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/nonlinearity/nonlinear-elasticity-of-granular-media/</guid>
      <description>颗粒介质中的非线性弹性</description>
    </item>
    
    <item>
      <title>Evolution of granular packings by nonlinear acoustic waves</title>
      <link>https://Muatyz.github.io/posts/read/sonic/nonlinearity/evolution-of-granular-packings-by-nonlinear-acoustic-waves/</link>
      <pubDate>Fri, 29 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/nonlinearity/evolution-of-granular-packings-by-nonlinear-acoustic-waves/</guid>
      <description>在颗粒介质中的非线性传播</description>
    </item>
    
    <item>
      <title>High time-resolved studies of stick–slip show similar dilatancy to fast and slow earthquakes</title>
      <link>https://Muatyz.github.io/posts/read/sonic/stickslip/high-time-resolved-studies-of-stick-slip-show-similar-dilatancy/</link>
      <pubDate>Tue, 26 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/stickslip/high-time-resolved-studies-of-stick-slip-show-similar-dilatancy/</guid>
      <description>超高时间分辨率下的滞滑超声信号研究</description>
    </item>
    
    <item>
      <title>Onset of Sliding in Amorphous Films Triggered by High-Frequency Oscillatory Shear</title>
      <link>https://Muatyz.github.io/posts/read/sonic/triggering/onset-of-sliding-in-amorphous-films-triggered-by/</link>
      <pubDate>Fri, 22 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/triggering/onset-of-sliding-in-amorphous-films-triggered-by/</guid>
      <description>高频振荡剪切触发非晶薄膜开始滑动</description>
    </item>
    
    <item>
      <title>Relaxation at the Angle of Repose</title>
      <link>https://Muatyz.github.io/posts/read/sonic/unread/relaxation-at-the-angle-of-repose/</link>
      <pubDate>Fri, 22 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/unread/relaxation-at-the-angle-of-repose/</guid>
      <description>Jia 2019 暑校关于颗粒受振雪崩/流变学的推荐文章</description>
    </item>
    
    <item>
      <title>Shear-wave-induced softening and simultaneous compaction in dense granular media through acoustic lubrication at flow heterogeneities</title>
      <link>https://Muatyz.github.io/posts/read/sonic/triggering/shear-wave-induced-softening-and-simulltaneous-compaction/</link>
      <pubDate>Fri, 22 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/triggering/shear-wave-induced-softening-and-simulltaneous-compaction/</guid>
      <description>颗粒介质中的非线性声学共振-剪切篇</description>
    </item>
    
    <item>
      <title>Triggering granular avalanches with ultrasound</title>
      <link>https://Muatyz.github.io/posts/read/sonic/triggering/triggering-granular-avalanches-with-ultrasound/</link>
      <pubDate>Tue, 19 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/triggering/triggering-granular-avalanches-with-ultrasound/</guid>
      <description>超声波的诱导效应</description>
    </item>
    
    <item>
      <title>Low-Frequency Behavior of Beads Constrained on a Lattice</title>
      <link>https://Muatyz.github.io/posts/read/sonic/unread/low-freq-behavior-of-beads-constrained-on-a-lattice/</link>
      <pubDate>Mon, 18 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/unread/low-freq-behavior-of-beads-constrained-on-a-lattice/</guid>
      <description>相似性参数$\Gamma$的起始文章</description>
    </item>
    
    <item>
      <title>Probing the shear-band formation in granular media with sound waves</title>
      <link>https://Muatyz.github.io/posts/read/sonic/stickslip/probing-the-shear-band-formation-in-granular-media/</link>
      <pubDate>Mon, 18 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/stickslip/probing-the-shear-band-formation-in-granular-media/</guid>
      <description>用声波检测颗粒介质中的剪切带的形成</description>
    </item>
    
    <item>
      <title>Nonlinear dynamics, granular media and dynamic earthquake triggering</title>
      <link>https://Muatyz.github.io/posts/read/sonic/nonlinearity/nonlinear-dynamics-granular-media/</link>
      <pubDate>Thu, 14 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/nonlinearity/nonlinear-dynamics-granular-media/</guid>
      <description>颗粒介质里的非线性动力学</description>
    </item>
    
    <item>
      <title>Elastic weakening of a dense granular pack by acoustic fluidization: Slipping, compaction, and aging</title>
      <link>https://Muatyz.github.io/posts/read/sonic/triggering/elastic-weakening-of-a-dense-granular-pack-by-acoustic-fluidization/</link>
      <pubDate>Tue, 12 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/triggering/elastic-weakening-of-a-dense-granular-pack-by-acoustic-fluidization/</guid>
      <description>压缩波的波速能够体现模量的软化</description>
    </item>
    
    <item>
      <title>DIFFUSIVITY OF ULTRASOUND IN POLYCRYSTALS</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/diffusivity-of-ultrasound-in-polycrystals/</link>
      <pubDate>Fri, 01 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/diffusivity-of-ultrasound-in-polycrystals/</guid>
      <description>推导出多分散体系的超声扩散方程(relevant radiative transport equations, RTE)的原始论文, 可用于了解用于颗粒介质的扩散方程是如何导出的.</description>
    </item>
    
    <item>
      <title>Transverse Shear Oscillator Investigation of Boundary Lubrication in Weakly Adhered Films</title>
      <link>https://Muatyz.github.io/posts/read/sonic/unread/transverse-shear-oscillator-investigation-of-boundary-lubrication-in-weakly-adhered-films/</link>
      <pubDate>Fri, 01 Dec 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/unread/transverse-shear-oscillator-investigation-of-boundary-lubrication-in-weakly-adhered-films/</guid>
      <description>摩擦表面级别的精细结构研究</description>
    </item>
    
    <item>
      <title>Experimental test of the diffusion approximation for multiply scattered sound</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/exp-test-of-the-diffusion-approx-for-multi-scattered-sound/</link>
      <pubDate>Thu, 30 Nov 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/exp-test-of-the-diffusion-approx-for-multi-scattered-sound/</guid>
      <description>求解声场扩散模型的参考方法</description>
    </item>
    
    <item>
      <title>地震学</title>
      <link>https://Muatyz.github.io/posts/phy/scmp/seismology/</link>
      <pubDate>Thu, 30 Nov 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/scmp/seismology/</guid>
      <description>直接从地震学入手学习目前对于地震波的认知, 算是少走一点弯路.</description>
    </item>
    
    <item>
      <title>Mechanisms for Acoustic Absorption in Dry and Weakly Wet Granular Media</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/mechanisms-for-acoustic-absorption-in-dry-and-weakly-wet-granular-media/</link>
      <pubDate>Wed, 29 Nov 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/mechanisms-for-acoustic-absorption-in-dry-and-weakly-wet-granular-media/</guid>
      <description>介绍品质因子 $Q$(或者耗散 $Q^{-1}$) 在对颗粒介质研究中的作用</description>
    </item>
    
    <item>
      <title>Probing the effect of particle shape on the rigidity of jammed granular solids with sound speed measurements</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/probing-the-effect-of-particle-shape/</link>
      <pubDate>Wed, 29 Nov 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/probing-the-effect-of-particle-shape/</guid>
      <description>该文章可用于系统学习如何测量群速度</description>
    </item>
    
    <item>
      <title>Sound in Sand</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/sound-in-sand/</link>
      <pubDate>Wed, 29 Nov 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/sound-in-sand/</guid>
      <description>早期有关声学在颗粒介质中的应用研究</description>
    </item>
    
    <item>
      <title>等效介质理论(EMT)</title>
      <link>https://Muatyz.github.io/posts/phy/scmp/effective-medium-theory/</link>
      <pubDate>Wed, 29 Nov 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/scmp/effective-medium-theory/</guid>
      <description>在平均场的思想下, 假设颗粒间满足紧束缚, 并且颗粒固体体系的应变满足仿射近似, 从而将颗粒固体的模量与外界加载以及声速联系起来.</description>
    </item>
    
    <item>
      <title>一般声学方法</title>
      <link>https://Muatyz.github.io/posts/phy/scmp/common-acoustic-tech/</link>
      <pubDate>Wed, 29 Nov 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/scmp/common-acoustic-tech/</guid>
      <description>本文整理自&amp;lt;声学原理&amp;gt;等书, 意图使读者掌握基本的声学探测原理, 需要注意: 其未必可适用于颗粒介质.</description>
    </item>
    
    <item>
      <title>声学探测方法</title>
      <link>https://Muatyz.github.io/posts/phy/scmp/acoustic-research/</link>
      <pubDate>Tue, 28 Nov 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/scmp/acoustic-research/</guid>
      <description>整理贾小平与周志刚等人对颗粒介质的声学研究原理, 以及更通用的声学探测技术</description>
    </item>
    
    <item>
      <title>[周志刚]博士学位论文阅读笔记</title>
      <link>https://Muatyz.github.io/posts/read/sonic/unread/zhou-zhi-gang-doc-paper/</link>
      <pubDate>Wed, 08 Nov 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/unread/zhou-zhi-gang-doc-paper/</guid>
      <description>中科院物理研究所, 厚美瑛老师指导的&amp;lt;颗粒固体的力学响应和声波传播的研究&amp;gt;, 适合作为颗粒物质新手学习声学相关的内容</description>
    </item>
    
    <item>
      <title>Ultrasound propagation in disordered granular media</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/ultrasound-propagation-in-disordered-granular-media/</link>
      <pubDate>Wed, 01 Nov 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/ultrasound-propagation-in-disordered-granular-media/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;DOI: &lt;a href=&#34;https://www.cambridge.org/core/journals/mrs-online-proceedings-library-archive/article/abs/ultrasound-propagation-in-disordered-granular-media/0CA21C40A90F990AEA745B52BEE5C754&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow noreferrer&#34; &gt;10.1557/PROC-627-BB3.5&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;We have identified, according to the ratio of the wavelength to the grain size, two distinct types of pulsed ultrasound transmission through a dry bead packing under stress: one corresponds to coherent ballistic waves characterized by the effective medium description, the other to the waves scattered by the inhomogeneous stress field within the granular medium. Over long distances of transport, the multiply scattered waves exhibit a diffusive character. Also we investigate the dynamics of the granular medium during a compaction under cyclic loading-unloading.&lt;/p&gt;
&lt;p&gt;Both the macroscopic deformation and the microscopic rearrangement have been measured, via an ultrasonic correlation technique using the multiple acoustic scattering very sensitive to the change of the system configuration. It is found that as the packing fraction increases, there is a continuous evolution of the system in response to external loading, from an irreversible behavior towards more elastic one.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[中字]Sands, Powders, and Grains: An Introduction to the Physics of Granular Materials</title>
      <link>https://Muatyz.github.io/posts/read/granular/introduction-to-physics-of-granular-materials/</link>
      <pubDate>Fri, 20 Oct 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/granular/introduction-to-physics-of-granular-materials/</guid>
      <description>导师推荐的适用于本科高年级学生的颗粒物理教材</description>
    </item>
    
    <item>
      <title>组会记录</title>
      <link>https://Muatyz.github.io/posts/life/weekly-meeting/</link>
      <pubDate>Fri, 13 Oct 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/life/weekly-meeting/</guid>
      <description>如果不想每周都被拷打的话, 建议最好看看</description>
    </item>
    
    <item>
      <title>毕业论文工作日志</title>
      <link>https://Muatyz.github.io/posts/life/reference-stack/</link>
      <pubDate>Wed, 11 Oct 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/life/reference-stack/</guid>
      <description>本文记录毕业论文从开题至结题的完整工作日志.</description>
    </item>
    
    <item>
      <title>Probing intermittency and reversibility in a dense granular suspension under shear using multiply scattered ultrasound</title>
      <link>https://Muatyz.github.io/posts/read/sonic/stickslip/probing-intermittency-and-reversibility-in-a-dense-granular-suspension/</link>
      <pubDate>Tue, 10 Oct 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/stickslip/probing-intermittency-and-reversibility-in-a-dense-granular-suspension/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;We study the &lt;strong&gt;rheology&lt;/strong&gt; of a dense granular suspension under shear strain with the simultaneous detection of multiply scattered ultrasound through the shear band. At a low shear rate, the dissipation is rate-independent and determined by the frictional contacts between grains. Under quasistatic shear, the stress–strain curve contains elastic loading parts interrupted by stress drops. Such an intermittency is concomitant with some large decorrelation events as measured by the ultrasound probe, sensitive to the position of the grains.&lt;/p&gt;
&lt;p&gt;Under cyclic shear, the correlations between the scattered ultrasonic waves show that at low shear strain, the grains exhibit reversible motion. Beyond this linear regime, some irreversible motion of the grains is detected. Moreover, the correlation between successive ultrasound signals suggests that some specific rearrangements, which add to the homogeneous flow, take place near the maximum strain.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sound pulse broadening in stressed granular media</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/sound-pulse-broadening-in-stressed-granular-media/</link>
      <pubDate>Mon, 09 Oct 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/sound-pulse-broadening-in-stressed-granular-media/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The pulse broadening and decay of coherent sound waves propagating in disordered granular media are investigated. We find that the pulse width of these compressional waves is broadened when the disorder is increased by mixing the beads made of &lt;em&gt;different&lt;/em&gt; materials.&lt;/p&gt;
&lt;p&gt;To identify the responsible mechanism for the pulse broadening, we also perform the acoustic attenuation measurement by spectral analysis and the numerical simulation of pulsed sound wave propagation along 1D disordered elastic chains. The qualitative agreement between experiment and simulation reveals a dominant mechanism by scattering attenuation at the &lt;em&gt;high-frequency&lt;/em&gt; range, which is consistent with theoretical models of sound wave scattering in strongly random media via a correlation length.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们研究了相干声波在无序颗粒介质中传播时的脉冲展宽和衰减。我们发现，通过混合&lt;em&gt;不同材料&lt;/em&gt;制成的珠子来增加无序度时，这些压缩波的脉冲宽度会变宽。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ultrasound Propagation in Externally Stressed Granular Media</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/ultrasound-in-stressed-granular/</link>
      <pubDate>Mon, 09 Oct 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/ultrasound-in-stressed-granular/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;X.jia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Experimental observations of pulsed ultrasonic transmission through granular glass beads under oedometric loading are presented. We observe in the transmitted signals the coexistence of a coherent &lt;strong&gt;ballistic pulse&lt;/strong&gt; traveling through an “effective contact medium” and a specklelike multiply scattered signal. The relative amplitudes of these signals strongly depend on the ratios of the bead size to the wavelength and to the detector size. Experimental data support recent descriptions of &lt;strong&gt;the inhomogeneous stress field&lt;/strong&gt; within granular media.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文介绍了在气压加载条件下脉冲超声波穿过颗粒状玻璃珠的实验观察结果。我们在传输信号中观察到，在 &amp;ldquo;有效接触介质&amp;rdquo; 中传播的相干&lt;strong&gt;弹道脉冲&lt;/strong&gt;与斑点状多散射信号共存。这些信号的相对振幅在很大程度上取决于珠子大小与波长和探测器大小之比。实验数据支持最近对颗粒介质内&lt;strong&gt;不均匀应力场&lt;/strong&gt;的描述。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Monte Carlo Simulations of Ultrasound Scattering and Absorption in Finite-Size Heterogeneous Materials</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/monte-carlo-simulations-of-ultrasound-scattering/</link>
      <pubDate>Sat, 07 Oct 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/monte-carlo-simulations-of-ultrasound-scattering/</guid>
      <description>蒙特卡洛算法在超声波探测中的应用</description>
    </item>
    
    <item>
      <title>从扩散模型到朗之万动力学</title>
      <link>https://Muatyz.github.io/posts/phy/scmp/langevin-dynamics/</link>
      <pubDate>Thu, 28 Sep 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/scmp/langevin-dynamics/</guid>
      <description>随机梯度下降和扩散模型(Diffusion Model)</description>
    </item>
    
    <item>
      <title>[中字]Random Loose Packing in Granular Matter</title>
      <link>https://Muatyz.github.io/posts/read/granular/random-loose-packing/</link>
      <pubDate>Mon, 25 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/granular/random-loose-packing/</guid>
      <description>随机松散堆积</description>
    </item>
    
    <item>
      <title>Codalike Multiple Scattering of Elastic Waves in Dense Granular Media</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/elastic-waves-in-dense-granular-media/</link>
      <pubDate>Mon, 25 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/elastic-waves-in-dense-granular-media/</guid>
      <description>随机松散堆积</description>
    </item>
    
    <item>
      <title>[中字]Edwards statistical mechanics for jammed granular matter</title>
      <link>https://Muatyz.github.io/posts/read/granular/edwards-statistical-mechanics-for-jammed-granular-matter/</link>
      <pubDate>Sun, 24 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/granular/edwards-statistical-mechanics-for-jammed-granular-matter/</guid>
      <description>系统介绍 Edwards 表述的小册子.</description>
    </item>
    
    <item>
      <title>Effect of Amplitude and Duration of Cyclic Loading on Frictional Sliding Instability in Granular Media: Implication to Earthquake Triggering of Landslides</title>
      <link>https://Muatyz.github.io/posts/read/sonic/stickslip/effect-of-amp-and-dura-of-cyc-loa/</link>
      <pubDate>Sun, 24 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/stickslip/effect-of-amp-and-dura-of-cyc-loa/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Strong earthquakes with larger magnitude and longer durations trigger many landslides, however, how magnitude and duration affect landslides is still unclear. Many factors could contribute to this, including additional shear stress provided by strong ground motion, or “seismogenic liquefaction”; herein, we hypothesize that the dynamic weakening of sliding zone gouge is important. We explored the influence of earthquake magnitude and duration on landslide triggering by simulating the seismic response of sliding zone gouge using a dynamic ring-shear device and glass spheres.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;震级较大、持续时间较长的强震会引发许多滑坡，但震级和持续时间如何影响滑坡仍不清楚。造成这种情况的因素有很多，包括强地面运动提供的额外剪应力或 &amp;ldquo;地震引起的液化&amp;rdquo;；在此，我们假设滑动带冲沟的动态削弱非常重要。我们通过使用动态环剪装置和玻璃球模拟滑动带冲沟的地震响应，探讨了地震震级和持续时间对滑坡触发的影响。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sound velocity fluctuations in confined granular materials: Coarse-graining lengths and elastic heterogeneities</title>
      <link>https://Muatyz.github.io/posts/read/sonic/dgm/sound-velocity-fluctuations-in-confined-granular-materials/</link>
      <pubDate>Sun, 24 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/dgm/sound-velocity-fluctuations-in-confined-granular-materials/</guid>
      <description>固结颗粒材料中的声速波动：粗粒化长度和弹性异质性</description>
    </item>
    
    <item>
      <title>Stick-Slip Nucleation and Failure in Uniform Glass Beads Detected by Acoustic Emissions in Ring-Shear Experiments: Implications for Identifying the Acoustic Emissions of Earthquake Foreshocks</title>
      <link>https://Muatyz.github.io/posts/read/sonic/stickslip/stick-slip-nucleation-and-failure-in-uniform-glass-beads-detected-by-acoustic-emissions-in-ring-shear-experiments/</link>
      <pubDate>Sun, 24 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/stickslip/stick-slip-nucleation-and-failure-in-uniform-glass-beads-detected-by-acoustic-emissions-in-ring-shear-experiments/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;DOI:&lt;a href=&#34;https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2023JB026612&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow noreferrer&#34; &gt;10.1029/2023JB026612&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Stress accumulation and release reflected by &lt;strong&gt;acoustic emissions&lt;/strong&gt; (AEs) during shearing of granular materials provide important information on failure mechanisms in &lt;strong&gt;seismic faults&lt;/strong&gt; and landslides controlled by stick-slip.&lt;/p&gt;
&lt;p&gt;Among many characteristics (amplitude, energy, counts, and frequency) of AE signals generated by stick-slip, stress changes corresponding to various frequency AEs in different stages of the stickslip process are not clear, which limits our knowledge of the characteristics of precursory signals before stickslip failure.&lt;/p&gt;
&lt;p&gt;To better understand the physical mechanisms of granular stick-slip, we monitored the mechanical and AE signals using high-frequency ($2 \text{MHz}$) &lt;strong&gt;synchronous acquisition&lt;/strong&gt; during &lt;strong&gt;constant-speed shear&lt;/strong&gt; of packs of uniform glass beads with different sizes at different normal stresses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;颗粒材料剪切过程中的&lt;strong&gt;声发射&lt;/strong&gt;（AEs）所反映的应力积累和释放，为研究&lt;strong&gt;地震断层&lt;/strong&gt;和滞滑控制的滑坡的破坏机制提供了重要信息。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Time reversal of ultrasound in granular media</title>
      <link>https://Muatyz.github.io/posts/read/sonic/unread/time-reversal-of-ultrasound-in-granular-media/</link>
      <pubDate>Sun, 24 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/unread/time-reversal-of-ultrasound-in-granular-media/</guid>
      <description>本文详细探讨了在颗粒介质中的&amp;#34;可逆性&amp;#34;概念</description>
    </item>
    
    <item>
      <title>Transitional nonlinear elastic behaviour in dense granular media</title>
      <link>https://Muatyz.github.io/posts/read/sonic/nonlinearity/transitional-nonlinear-elastic-behaviour-in-dense-granular-media/</link>
      <pubDate>Sun, 24 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/sonic/nonlinearity/transitional-nonlinear-elastic-behaviour-in-dense-granular-media/</guid>
      <description>致密颗粒介质中的过渡非线性弹性行为</description>
    </item>
    
    <item>
      <title>作为模型玻璃体系的颗粒物质结构学研究</title>
      <link>https://Muatyz.github.io/posts/read/ct/xcj-glass-former/</link>
      <pubDate>Sun, 24 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/ct/xcj-glass-former/</guid>
      <description>夏成杰, 2018</description>
    </item>
    
    <item>
      <title>[中字]Edwards entropy and compactivity in a model of granular matter</title>
      <link>https://Muatyz.github.io/posts/read/granular/edwards-entropy-and-compactivity/</link>
      <pubDate>Sat, 23 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/granular/edwards-entropy-and-compactivity/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Formulating a statistical mechanics for granular matter remains a significant challenge, in part due to the difficulty associated with a complete characterization of the systems under study.&lt;/p&gt;
&lt;p&gt;We present a fully characterized model of a granular material consisting of $N$ two-dimensional, frictionless hard disks, confined between hard walls, including a complete enumeration of all possible jammed structures. We show that the properties of the jammed packings are independent of the distribution of defects within the system and that all the packings are isostatic.&lt;/p&gt;
&lt;p&gt;This suggests that the assumption of equal probability for states of equal volume, which provides one possible way of constructing the equivalent of a microcanonical ensemble, is likely to be valid for our model.&lt;/p&gt;
&lt;p&gt;An application of the second law of thermodynamics involving two subsystems in contact shows that the expected spontaneous equilibration of defects between the two is accompanied by an increase in entropy and that the equilibrium, obtained by entropy maximization, is characterized by the equality of compactivities.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[中字]Equivalence of Fluctuation-Dissipation and Edwards’ Temperature in Cyclically Sheared Granular Systems</title>
      <link>https://Muatyz.github.io/posts/read/granular/eq-of-temp/</link>
      <pubDate>Sat, 23 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/granular/eq-of-temp/</guid>
      <description>通过两种定义来确定循环剪切颗粒系统中的两种温度, 这两种温度存在很强的一致性.</description>
    </item>
    
    <item>
      <title>毕业论文选题调研</title>
      <link>https://Muatyz.github.io/posts/phy/scmp/research/</link>
      <pubDate>Thu, 21 Sep 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/scmp/research/</guid>
      <description>初步阅读课题组内的文献并且确定感兴趣的方向</description>
    </item>
    
    <item>
      <title>A dynamic synchrotron X-ray imaging study of effective temperature in a vibrated granular medium</title>
      <link>https://Muatyz.github.io/posts/read/ct/effective-temp/</link>
      <pubDate>Thu, 21 Sep 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/ct/effective-temp/</guid>
      <description>利用超快同步辐射成像技术追踪示踪颗粒计算有效温度</description>
    </item>
    
    <item>
      <title>自旋链</title>
      <link>https://Muatyz.github.io/posts/phy/calphy/1d-spin-chain/</link>
      <pubDate>Wed, 26 Jul 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/calphy/1d-spin-chain/</guid>
      <description>毕业论文资料收集</description>
    </item>
    
    <item>
      <title>[中字]Engineering flat bands in twisted-bilayer graphene away from the magic angle with chiral optical cavities</title>
      <link>https://Muatyz.github.io/posts/read/stack/away-from-magic-angle/</link>
      <pubDate>Fri, 21 Jul 2023 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/stack/away-from-magic-angle/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Twisted bilayer graphene (TBG) is a recently discovered two-dimensional superlattice structure which exhibits strongly-correlated quantum many-body physics, including strange metallic behavior and unconventional superconductivity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;扭曲双层石墨烯(TBG)是最近发现的一种二维超晶格结构, 它表现出强相关量子多体物理学, 包括奇异的金属行为和非常规超导性.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most of TBG exotic properties are connected to the emergence of a pair of isolated and topological flat electronic bands at the so-called magic angle, $\theta \approx 1.05°$, which are nevertheless very fragile.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TBG 的大部分奇异特性都与在所谓的魔角 $\theta \approx 1.05°$ 处出现的一对孤立的拓扑平坦电子带有关, 但这些电子带非常脆弱.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2023年物理研究生招生夏令营面试政策</title>
      <link>https://Muatyz.github.io/posts/life/summer-camp-policy/</link>
      <pubDate>Wed, 12 Jul 2023 00:18:15 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/life/summer-camp-policy/</guid>
      <description>&lt;h1 id=&#34;招生规模&#34;&gt;招生规模&lt;/h1&gt;
&lt;p&gt;$$
\left|\begin{array}{c|c|c}
\hline
\text{招生类型} &amp;amp; \text{招生单位} &amp;amp; \text{人数} \\
\hline
\text{直博生}   &amp;amp; \text{学院}    &amp;amp; 50\\
\hline
\text{直博生}   &amp;amp; \text{李所}    &amp;amp; 28\\
\hline
\text{直硕生}   &amp;amp; \text{学院}    &amp;amp; 25-30\\
\hline
\end{array}\right|
$$&lt;/p&gt;
&lt;h1 id=&#34;直博生优营类型&#34;&gt;直博生优营类型&lt;/h1&gt;
&lt;p&gt;$$
\left|\begin{array}{c|c|c}
\hline
\text{类型} &amp;amp; \text{数目} &amp;amp; \text{政策} \\
\hline
A   &amp;amp; 50 + 28   &amp;amp; \text{预录取}\\
\hline
B   &amp;amp; 100    &amp;amp; \text{根据单位和二级学科依次递补}\\
\hline
\end{array}\right|
$$&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>拉普拉斯方程</title>
      <link>https://Muatyz.github.io/posts/phy/mpm/laplace/</link>
      <pubDate>Thu, 29 Jun 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/mpm/laplace/</guid>
      <description>总结拉普拉斯方程的求解思路</description>
    </item>
    
    <item>
      <title>静电场</title>
      <link>https://Muatyz.github.io/posts/phy/ed/field/</link>
      <pubDate>Tue, 27 Jun 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/ed/field/</guid>
      <description>以大纲方法重新梳理静电场的公式</description>
    </item>
    
    <item>
      <title>散射理论</title>
      <link>https://Muatyz.github.io/posts/phy/qp/scattering-method/</link>
      <pubDate>Fri, 23 Jun 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/qp/scattering-method/</guid>
      <description>在原子物理中我们学习过散射理论, 那么在量子力学中如何研究散射?</description>
    </item>
    
    <item>
      <title>量子熵</title>
      <link>https://Muatyz.github.io/posts/phy/qp/quantum-entropy/</link>
      <pubDate>Thu, 22 Jun 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/qp/quantum-entropy/</guid>
      <description>Schmidt 分解是线性代数中的一种处理方法, 如何应用在量子力学中?</description>
    </item>
    
    <item>
      <title>量子测量</title>
      <link>https://Muatyz.github.io/posts/phy/qp/quantum-measurement/</link>
      <pubDate>Mon, 19 Jun 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/qp/quantum-measurement/</guid>
      <description>学习如何使用物理的语言来定义测量.</description>
    </item>
    
    <item>
      <title>矢量分析</title>
      <link>https://Muatyz.github.io/posts/phy/ed/vector-analysis/</link>
      <pubDate>Mon, 19 Jun 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/ed/vector-analysis/</guid>
      <description>自由变换矢量和张量以及相应的计算是物理学的基础工具.</description>
    </item>
    
    <item>
      <title>微扰论</title>
      <link>https://Muatyz.github.io/posts/phy/qp/perturbation-theory/</link>
      <pubDate>Fri, 09 Jun 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/qp/perturbation-theory/</guid>
      <description>使用小量参数并使得物理量对其进行展开, 通过比较齐次项系数得到每阶修正结果.</description>
    </item>
    
    <item>
      <title>能带拓扑性质</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/topological/</link>
      <pubDate>Mon, 05 Jun 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/topological/</guid>
      <description>能带的计算中暗含着其拓扑性质</description>
    </item>
    
    <item>
      <title>能带论</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/energy-band-theory/</link>
      <pubDate>Fri, 02 Jun 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/energy-band-theory/</guid>
      <description>电子能带论</description>
    </item>
    
    <item>
      <title>布洛赫电子动力学</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/dynamic-of-bloch-electrons/</link>
      <pubDate>Wed, 31 May 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/dynamic-of-bloch-electrons/</guid>
      <description>从动力学方程出发研究布洛赫电子的性质</description>
    </item>
    
    <item>
      <title>半导体基础</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/semi-conductor/</link>
      <pubDate>Mon, 29 May 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/semi-conductor/</guid>
      <description>区别于金属和半金属的存在, 重点关注其价带和导带.</description>
    </item>
    
    <item>
      <title>多体: 密度泛函理论</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/density-generalized-function-theory/</link>
      <pubDate>Mon, 29 May 2023 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/density-generalized-function-theory/</guid>
      <description>多电子体系和密度泛函理论</description>
    </item>
    
    <item>
      <title>🤝友链</title>
      <link>https://Muatyz.github.io/links/</link>
      <pubDate>Wed, 10 May 2023 15:15:53 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/links/</guid>
      <description>&lt;div class=&#34;friend&#34;&gt;
&lt;a target=&#34;_blank&#34; href=https://www.sulvblog.cn title=Sulv&amp;#39;s&amp;#32;Blog class=&#34;friendurl&#34;&gt;
  &lt;div class=&#34;frienddiv&#34;&gt;
    &lt;div class=&#34;frienddivleft&#34;&gt;
      &lt;img class=&#34;myfriend&#34; src=https://www.sulvblog.cn/img/Q.gif /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;frienddivright&#34;&gt;
      &lt;div class=&#34;friendname&#34;&gt;Sulv&amp;#39;s Blog&lt;/div&gt;
      &lt;div class=&#34;friendinfo&#34;&gt;一个记录技术、阅读、生活的博客&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;
&lt;div class=&#34;friend&#34;&gt;
&lt;a target=&#34;_blank&#34; href=https://blog.hjroyal.top title=有意栽花花满枝 class=&#34;friendurl&#34;&gt;
  &lt;div class=&#34;frienddiv&#34;&gt;
    &lt;div class=&#34;frienddivleft&#34;&gt;
      &lt;img class=&#34;myfriend&#34; src=https://blog.hjroyal.top/img/profile.webp /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;frienddivright&#34;&gt;
      &lt;div class=&#34;friendname&#34;&gt;有意栽花花满枝&lt;/div&gt;
      &lt;div class=&#34;friendinfo&#34;&gt;心中有光、点亮生活&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;
&lt;a target=&#34;_blank&#34; href=https://54749110.github.io title=宣嘉乐 class=&#34;friendurl&#34;&gt;
  &lt;div class=&#34;frienddiv&#34;&gt;
    &lt;div class=&#34;frienddivleft&#34;&gt;
      &lt;img class=&#34;myfriend&#34; src=https://s2.loli.net/2023/05/19/vhueE5qat8ZWMjD.jpg /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;frienddivright&#34;&gt;
      &lt;div class=&#34;friendname&#34;&gt;宣嘉乐&lt;/div&gt;
      &lt;div class=&#34;friendinfo&#34;&gt;致远学者&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;
&lt;div class=&#34;friend&#34;&gt;
&lt;a target=&#34;_blank&#34; href=https://cn.focusnext.top/ title=CN&amp;#32;FocusNext class=&#34;friendurl&#34;&gt;
  &lt;div class=&#34;frienddiv&#34;&gt;
    &lt;div class=&#34;frienddivleft&#34;&gt;
      &lt;img class=&#34;myfriend&#34; src=https://www.notion.so/images/page-cover/woodcuts_4.jpg /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;frienddivright&#34;&gt;
      &lt;div class=&#34;friendname&#34;&gt;CN FocusNext&lt;/div&gt;
      &lt;div class=&#34;friendinfo&#34;&gt;主要关注关于CN的严肃话题，文章不多但都是个人的深度思考&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;
&lt;div class=&#34;friend&#34;&gt;
&lt;a target=&#34;_blank&#34; href=https://teru.space/ title=Teruteru class=&#34;friendurl&#34;&gt;
  &lt;div class=&#34;frienddiv&#34;&gt;
    &lt;div class=&#34;frienddivleft&#34;&gt;
      &lt;img class=&#34;myfriend&#34; src=https://teru.space/img/teruteru.jpg /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;frienddivright&#34;&gt;
      &lt;div class=&#34;friendname&#34;&gt;Teruteru&lt;/div&gt;
      &lt;div class=&#34;friendinfo&#34;&gt;这是一个以学业内容为主的站点...&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/a&gt;

&lt;/div&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;div style=&#34;font-size: 20px;&#34; class=&#34;youlian&#34;&gt;👉友链格式&lt;/div&gt;
&lt;div style=&#34;font-size: 16px;&#34;&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;名称：&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Blog-Name&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;网址：&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://www.blogurl&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow noreferrer&#34; &gt;https://www.blogurl&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;图标：&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://www.blogurl/img/Title.png&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow noreferrer&#34; &gt;https://www.blogurl/img/Title.png&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;描述：&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Description of the site&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;div style=&#34;font-size: 20px;&#34;&gt;👉友链申请要求&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;秉承互换友链原则、文章定期更新&lt;!-- 、网站在工信部备案 --&gt;、不能有太多广告、个人描述字数控制在15字内&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>课设</title>
      <link>https://Muatyz.github.io/posts/cs/intro-two-cs-project2/</link>
      <pubDate>Fri, 05 May 2023 12:20:21 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/cs/intro-two-cs-project2/</guid>
      <description>引航中断会导致港口运营效率较低, 因此对统计数据进行分析可以对引航作业点的移动提供风险评估和决策辅助</description>
    </item>
    
    <item>
      <title>数据结构反思总结</title>
      <link>https://Muatyz.github.io/posts/cs/datastructure/wangdao/</link>
      <pubDate>Fri, 05 May 2023 12:20:21 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/cs/datastructure/wangdao/</guid>
      <description>记录数据结构学习途中所遇到的经典问题</description>
    </item>
    
    <item>
      <title>数据结构经典代码</title>
      <link>https://Muatyz.github.io/posts/cs/datastructure/template-code/</link>
      <pubDate>Fri, 05 May 2023 12:20:21 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/cs/datastructure/template-code/</guid>
      <description>&lt;h1 id=&#34;序言&#34;&gt;序言&lt;/h1&gt;
&lt;p&gt;本文记录学习的经典数据结构的实现, 由于原严蔚敏的书中使用的代码为&lt;code&gt;C with &amp;amp;&lt;/code&gt;, 因此在真正的实现上是需要依赖于 cpp 的, 因此本文在具体的实现上为了能够&amp;quot;真正使用&amp;quot;有一些细节上的改动.&lt;/p&gt;
&lt;p&gt;在本文中的 ElemType 使用以下语句定义:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef ElemType
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ElemType int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;list&#34;&gt;List&lt;/h1&gt;
&lt;h2 id=&#34;static-sequence-list&#34;&gt;Static Sequence List&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MaxSize 50
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//数据类型为ElemType, 长度为 MaxSize 的静态线性表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ElemType data[MaxSize];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length;&lt;span style=&#34;color:#75715e&#34;&gt;//表长
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}SqList
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;dynamic-sequence-list&#34;&gt;Dynamic Sequence List&lt;/h2&gt;
&lt;h3 id=&#34;definition&#34;&gt;Definition&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define InitSize 100
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ElemType &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;data; &lt;span style=&#34;color:#75715e&#34;&gt;//表的地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; MaxSize;    &lt;span style=&#34;color:#75715e&#34;&gt;//动态表的最大长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length;     &lt;span style=&#34;color:#75715e&#34;&gt;//当前动态表的长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}SeqList;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SeqList L;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L.data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ElemType &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ElemType) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; InitSize);   &lt;span style=&#34;color:#75715e&#34;&gt;//动态分配
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    free(L);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;operations&#34;&gt;Operations&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//初始化动态表L
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InitList&lt;/span&gt;(SeqList &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;L){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L.data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ElemType &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ElemType) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; InitSize);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(L.data &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL){&lt;span style=&#34;color:#75715e&#34;&gt;//分配内存失败
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L.length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//在静态顺序表L中的第 i 位插入元素 e
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListInsert&lt;/span&gt;(SqList &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;L, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, ElemType e){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; L.length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){  &lt;span style=&#34;color:#75715e&#34;&gt;//判断传入的参数 i 是否合法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(L.length &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; MaxSize){ &lt;span style=&#34;color:#75715e&#34;&gt;//判断静态表是否已满
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L.length; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; i; j&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L.data[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L.data[j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;//依次后移
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L.data[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//删除静态顺序表 L 中的第 i 位元素, 并且通过传入参数 e 保存删除的元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListDelete&lt;/span&gt;(SqList &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;L, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, ElemType &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;e){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; L.length){  &lt;span style=&#34;color:#75715e&#34;&gt;//判断传入的参数 i 是否合法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; L.lrngth; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L.data[j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L.data[j];&lt;span style=&#34;color:#75715e&#34;&gt;//依次前移
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L.length&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//在静态顺序表 L 中查找第一个值为 e 的元素的[位置]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LocateElem&lt;/span&gt;(SqList &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;L, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, ElemType e){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; L.length; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(L.data[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; e){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//查找的是位置, 因此数组下标需要+1转换为编号
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//查找失败
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;linked-list&#34;&gt;Linked List&lt;/h2&gt;
&lt;h3 id=&#34;definition-1&#34;&gt;Definition&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//单链表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ElemType data;          &lt;span style=&#34;color:#75715e&#34;&gt;//数据域
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next;  &lt;span style=&#34;color:#75715e&#34;&gt;//下一结点地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}ListNode, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;LinkList;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;operations-1&#34;&gt;Operations&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//头插法建立单链表 L
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;LinkList &lt;span style=&#34;color:#a6e22e&#34;&gt;List_HeadInsert&lt;/span&gt;(LinkList &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;L){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (LinkList)malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ListNode));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;){   &lt;span style=&#34;color:#75715e&#34;&gt;//输入9999即代表结束插入
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ListNode));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; L;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//尾插法建立单链表 L
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;LinkList &lt;span style=&#34;color:#a6e22e&#34;&gt;List_TailInsert&lt;/span&gt;(LinkList &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;L){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x;&lt;span style=&#34;color:#75715e&#34;&gt;//接收键盘输入的数值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    L &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (LinkList)malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ListNode));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;new_node, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L;    &lt;span style=&#34;color:#75715e&#34;&gt;//tail 为表尾指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;){       &lt;span style=&#34;color:#75715e&#34;&gt;//输入9999即代表结束插入
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        new_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ListNode));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_node &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tail &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_node;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_node;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tail &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;    &lt;span style=&#34;color:#75715e&#34;&gt;//将尾指针置空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; L;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//在单链表 L 中按照序号查找结点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GetElem&lt;/span&gt;(LinkList L, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){&lt;span style=&#34;color:#75715e&#34;&gt;//检查传入的参数 i 是否合法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(ptr &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; i){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//在单链表 L 中按照值查找结点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LocateElem&lt;/span&gt;(LinkList L, ElemType e){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ListNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(ptr &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ptr &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; e){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;stacktemplate&#34;&gt;Stack(template)&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Size&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//模板类, 传入参数栈元素的数据类型 T, 和栈的最大深度 Size
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    T data[size];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; top;    &lt;span style=&#34;color:#75715e&#34;&gt;//当前栈中的栈顶元素的数组下标
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Stack()&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;top(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//初始化函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Stack(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//析构函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//向栈进入元素 item
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(T item){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(top &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){    &lt;span style=&#34;color:#75715e&#34;&gt;//检测栈是否已满
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        data[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;top] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//出栈栈顶元素, 并且使用 topElem 记录这个元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;(T &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;topElem){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(top &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){  &lt;span style=&#34;color:#75715e&#34;&gt;//检验栈是否为空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        topElem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[top];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//判断栈是否为空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; top &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//判断栈是否已满
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isFull&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; top &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;queuetemplate&#34;&gt;Queue(Template)&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Size&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//模板类, 传入参数队列元素的数据类型 T, 和队列的最大长度 Size
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Queue&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    T data[Size];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; front;  &lt;span style=&#34;color:#75715e&#34;&gt;//队头元素数组下标
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rear;   &lt;span style=&#34;color:#75715e&#34;&gt;//队尾元素数组下标
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tag;    &lt;span style=&#34;color:#75715e&#34;&gt;//辅助变量, 判断队列为空/满
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue()&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; front(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), rear(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), tag(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//构造函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Queue(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//析构函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//元素 item 入队
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EnQueue&lt;/span&gt;(T, item){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(front &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rear &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){  &lt;span style=&#34;color:#75715e&#34;&gt;//判断队列是否已满
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rear &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (rear &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; Size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        data[rear] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;//进行入队操作后, 将tag = 1, 这样 rear == front时只有可能为满
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//队列出队, 并且记录出队元素 item
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DeQueue&lt;/span&gt;(T &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;item){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(front &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rear &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){  &lt;span style=&#34;color:#75715e&#34;&gt;//判断队列是否为空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rear &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (rear &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; Size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tag[rear] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;//进行出队操作后, 将tag = 0, 这样 rear == front时只有可能为空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//判断队列是否为空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; front &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rear &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//判断队列是否为满
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isFull&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; front &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rear &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;string&#34;&gt;String&lt;/h1&gt;
&lt;h2 id=&#34;definition-2&#34;&gt;Definition&lt;/h2&gt;
&lt;h3 id=&#34;static-string&#34;&gt;Static String&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; MAXLEN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//字符串的最大长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//静态分配字符串
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; ch[MAXLEN];&lt;span style=&#34;color:#75715e&#34;&gt;//数据域
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length;     &lt;span style=&#34;color:#75715e&#34;&gt;//字符串长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}SString
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dynamic-string&#34;&gt;Dynamic String&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//动态分配字符串
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ch;       &lt;span style=&#34;color:#75715e&#34;&gt;//字符数组的地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length;     &lt;span style=&#34;color:#75715e&#34;&gt;//字符串长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}HString;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;linked-list-string&#34;&gt;Linked List String&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//使用字符串结点存储字符串
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringNode&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; ch[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;//4个字符一组存放在一个结点中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next;    &lt;span style=&#34;color:#75715e&#34;&gt;//下一个字符结点的地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}StringNode, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;String;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;operations-2&#34;&gt;Operations&lt;/h2&gt;
&lt;h3 id=&#34;static-string-1&#34;&gt;Static String&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//求静态字符串 S 中, 以 pos 为起点, 长为 len 的子串 sub.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//在这里, 我们设定字符串的S[0]不存储任何元素, 而是从S[1]开始存储字符串的元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SubString&lt;/span&gt;(SString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;sub, SString S, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pos, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; S.length){   &lt;span style=&#34;color:#75715e&#34;&gt;//检测子串末尾是否已经溢出原串长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pos; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sub.ch[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S.ch[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//比较两个静态串的大小
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//串的大小定义:(1)首先比长度(2)长度相等时, 比char对应的int.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StrCompare&lt;/span&gt;(SString S, SString, T){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; S.length &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; T.length; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(S.ch[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; T.ch[i]){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; S.ch[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; T.ch[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//未能在以上循环中完成输出, 说明两个串呈现包含关系(即S 是 T的子串, 或者相反)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//那么就应该使用长度来比较
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; S.length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; T.length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//查询静态串的长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StrLength&lt;/span&gt;(SStrng S){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; S.length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//使用朴素便利方法查询子串 T 首次出现在 S 中时的位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Index&lt;/span&gt;(SString S, SString T){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; S.length &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; T.length){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(S.ch[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; T.ch[i]){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//匹配成功, i,j同步后移以进行下一位的比较
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//匹配失败, 则 i 回到原先起点的下一位开始重新匹配
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; T.length){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; T.length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//使用KMP算法, 借助next[]数组查询子串 T 首次出现在 S 中时的位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Index_KMP&lt;/span&gt;(SString S, SString T, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; next[]){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; S.length &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; T.length){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; S.ch[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T.ch[j]){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next[j];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; T.length){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; T.length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//根据next[]数组生成nextval[]数组, 从而优化KMP算法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next2nextval&lt;/span&gt;(SString T, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; next[]){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nextval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(T.length &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nextval[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; T.length; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(T.ch[next[j]] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; T.ch[j]){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            nextval[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nextval[next[j]];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            nextval[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next[j];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nextval;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dynamic-string-1&#34;&gt;Dynamic String&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//初始化动态字符串
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InitHString&lt;/span&gt;(HString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;S){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    S.ch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(MAXLEN &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(S.ch &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL){   &lt;span style=&#34;color:#75715e&#34;&gt;//内存分配失败
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    S.length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;tree--binary-tree&#34;&gt;Tree &amp;amp; Binary Tree&lt;/h1&gt;
&lt;!-- &lt;span title=&#34;你知道的太多了&#34; style=&#34;background-color: black; color: black;&#34;&gt;所以为什么要学ITensor呢? 直接用matlab模拟不就好了&lt;/span&gt; --&gt;
&lt;h2 id=&#34;binary-tree&#34;&gt;Binary Tree&lt;/h2&gt;
&lt;h3 id=&#34;definition-3&#34;&gt;Definition&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MAXSIZE 10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//二叉树结点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BiTNode&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ElemType data;          &lt;span style=&#34;color:#75715e&#34;&gt;//数据域
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BiTNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lchild; &lt;span style=&#34;color:#75715e&#34;&gt;//左子树根结点地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BiTNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rchild; &lt;span style=&#34;color:#75715e&#34;&gt;//右子树根结点地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}BiTNode, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;BiTree;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;operations-3&#34;&gt;Operations&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//初始化二叉树root
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InitBiTree&lt;/span&gt;(BiTree &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;root){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;&lt;span style=&#34;color:#75715e&#34;&gt;//通过置空来清洗之间root所在空间中地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (BiTree)malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(BiTNode));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    root &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    root &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    root &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//向二叉树root中插入值为 val 的结点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InsertBiTNode&lt;/span&gt;(BiTree &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;root, ElemType val){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BiTNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;new_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (BiTNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(BiTNode));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(new_node &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        root &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_node;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_node &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_node &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_node &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(root &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        root &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_node;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_node &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_node &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_node &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid root!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//定义方位二叉树结点的行为
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;observe&lt;/span&gt;(BiTree T){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//前根遍历二叉树 T
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//使用递归定义
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PreOrder&lt;/span&gt;(BiTree T){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(T &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        observe(T);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PreOrder(T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PreOrder(T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//中根遍历二叉树 T
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//使用递归定义
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InOrder&lt;/span&gt;(BiTree T){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(T &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        InOrder(T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        observe(T);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        InOrder(T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//后根遍历二叉树 T
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//使用递归定义
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostOrder&lt;/span&gt;(BiTree T){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(T &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PostOrder(T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PostOrder(T &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        observer(T);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//层次遍历二叉树 T
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//借助队列模板类实现
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LevelOrder&lt;/span&gt;(BiTree T){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BiTree,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;queue;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BiTree p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    queue.Enqueue(T);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;queue.isEmpty()){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue.DeQueue(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        observe(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(p &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.EnQueue(p &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(p &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue.EnQueue(p &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;thread-tree&#34;&gt;Thread Tree&lt;/h2&gt;
&lt;h3 id=&#34;definition-4&#34;&gt;Definition&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ThreadNode&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ElemType data;              &lt;span style=&#34;color:#75715e&#34;&gt;//数据域
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ThreadNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lchild;  &lt;span style=&#34;color:#75715e&#34;&gt;//左子树的根结点地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ThreadNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rchild;  &lt;span style=&#34;color:#75715e&#34;&gt;//右子树的根结点地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ltag;                   &lt;span style=&#34;color:#75715e&#34;&gt;//标记左子树根结点是否为线索, 1 为 是, 0 为 非
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rtag;                   &lt;span style=&#34;color:#75715e&#34;&gt;//标记右子树根结点是否为线索, 1 为 是, 0 为 非
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;operation&#34;&gt;Operation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//使用全局变量 pre 来指定前驱结点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ThreadNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//访问行为 visit()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt;(ThreadNode &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nodeptr){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//没有左孩子, 则空链域可以用来存储前驱结点地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(nodeptr &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodeptr &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; lchild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pre;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodeptr &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ltag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//没有右孩子, 则空链域可以用来存储后继结点地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(pre &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pre &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pre &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rchild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodeptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pre &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rtag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodeptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>🙋🏻‍♂️关于</title>
      <link>https://Muatyz.github.io/about/</link>
      <pubDate>Thu, 04 May 2023 14:57:28 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/about/</guid>
      <description>&lt;p style=&#34;font-size: 25px;&#34;&gt;该站点用于记录每日所学新知&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Interest:&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Condensed Matter Physics, Numerical Calculation&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Profile:&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Undergraduate&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;本站已对 Twikoo 添加了 KaTex 支持. 在评论中使用 &lt;code&gt;$$&lt;/code&gt; 包裹公式即可. 例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x_{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x_{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y_{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}^{\prime}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示效果为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$$
x_{1} + x_{2} = y_{1}^{\prime}
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;若在浏览公式时发现其字体大小不当, 可右键点击公式, 依次选取 &lt;code&gt;数学设置(Math Settings)&lt;/code&gt; -&amp;gt; &lt;code&gt;缩放所有数学...(Scale All Math...)&lt;/code&gt;, 选择合适的缩放比例即可. 经验上一般填写 &lt;code&gt;200%&lt;/code&gt; 阅读体验最好;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>密度矩阵</title>
      <link>https://Muatyz.github.io/posts/phy/qp/density-matrix/</link>
      <pubDate>Sun, 19 Jun 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/qp/density-matrix/</guid>
      <description>&lt;h1 id=&#34;投影算符&#34;&gt;投影算符&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;假设对于一个物理量算符 $\hat{R}$, 其本征方程为&lt;/p&gt;
&lt;p&gt;$$
\hat{R}|\psi_{k}\rangle = r_{k}|\psi_{k}\rangle\quad(k = 0,1,\dots)
$$&lt;/p&gt;
&lt;p&gt;我们引入&lt;strong&gt;投影算符&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;$$
\hat{\pi}_{k} = |\psi_{k}\rangle\langle\psi_{k}|
$$&lt;/p&gt;
&lt;p&gt;所以显然有&lt;/p&gt;
&lt;p&gt;$$
\hat{\pi}_{k}|\psi_{n}\rangle = |\psi_{k}\rangle\langle\psi_{k}|\psi_{n}\rangle = \delta_{kn}|\psi_{k}\rangle
$$&lt;/p&gt;
&lt;h2 id=&#34;性质&#34;&gt;性质&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;厄密性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$
\hat{\pi}_{k} = \hat{\pi}_{k}^{\dagger}
$$&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;幂等性(Idempotent)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$
\hat{\pi}_{k}^{2} = |\psi_{k}\rangle\langle\psi_{k}|\psi_{k}\rangle\langle\psi_{k}|=|\psi_{k}\rangle\langle\psi_{k}|=\hat{\pi}_{k}
$$&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;完备性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$
\sum_{k}\hat{\pi}_{k} = I
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;证明:&lt;/p&gt;
&lt;p&gt;对任意的态 $|\psi\rangle$, 都可以将其写作基函数的展开:
$$
|\psi\rangle = c_{1}|\psi_{1}\rangle + c_{2}|\psi_{2}\rangle + \dots + c_{n}|\psi_{n}\rangle = \sum_{i}{c_{i}|\psi_{i}\rangle}
$$
那么将投影算符和作用到该态上:
$$
\sum_{k}\hat{\pi}_{k}|\psi\rangle = \sum_{k}|\psi_{k}\rangle\langle\psi_{k}|\sum_{i}c_{i}|\psi_{i}\rangle = \sum_{k}\sum_{i}c_{i}|\psi_{k}\rangle\langle\psi_{k}|\psi_{i}\rangle = \\
\sum_{k}\sum_{i}c_{i}\delta_{ki}|\psi_{k}\rangle = \sum_{k}c_{k}|\psi_{k}\rangle = |\psi\rangle
$$&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为Github添加LFS支持</title>
      <link>https://Muatyz.github.io/posts/cs/github-lfs/</link>
      <pubDate>Wed, 11 May 2022 00:17:58 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/cs/github-lfs/</guid>
      <description>当你向Github提交代码时, 如果文件大小超过了100Mb的限制, 那么你的提交将会被拒绝. 这时候LFS就很有必要了.</description>
    </item>
    
    <item>
      <title>[课设]DCI方案中快电子加热的软X射线诊断研究</title>
      <link>https://Muatyz.github.io/posts/exp/dci-soft-x-ray/</link>
      <pubDate>Tue, 10 May 2022 00:18:15 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/exp/dci-soft-x-ray/</guid>
      <description>&lt;p&gt;指导老师: &lt;a href=&#34;https://www.physics.sjtu.edu.cn/jsml/zhangjie.html&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow noreferrer&#34; &gt;张杰&lt;/a&gt;, &lt;a href=&#34;https://www.physics.sjtu.edu.cn/jsml/yuanxiaohui.html&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow noreferrer&#34; &gt;远晓辉&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;助教: &lt;a href=&#34;mailto:lijinglong@sjtu.edu.cn&#34;&gt;李璟隆&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;details admonition warning open&#34;&gt;

 &lt;div class=&#34;details-summary admonition-title&#34;&gt;

 &lt;i class=&#34;icon fas fa-exclamation-triangle fa-fw&#34;&gt;&lt;/i&gt;涉密内容警告&lt;i class=&#34;details-icon fas fa-angle-right fa-fw&#34;&gt;&lt;/i&gt;

 &lt;/div&gt;

 &lt;div class=&#34;details-content&#34;&gt;

 &lt;div class=&#34;admonition-content&#34;&gt;经过和助教的交流, 得知聚变涉及的内容比较敏感, 相关的代码必然不可能直接展示在本文中, 所以下面所有的代码均为 ChatGPT 给出的&lt;strong&gt;示例性代码&lt;/strong&gt;以供思路上的参考.&lt;/div&gt;

 &lt;/div&gt;

 &lt;/div&gt;
&lt;h1 id=&#34;研究背景&#34;&gt;研究背景&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://s2.loli.net/2023/05/11/Xl1E3thVLsQdq9Z.png&#34; alt=&#34;双锥对撞点火方案&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;传统的中心点火方案存在两个问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;同时压缩和加热带来的不可控性;&lt;/li&gt;
&lt;li&gt;加热效率较低.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以设计了图示的有四个步骤组成的 &lt;strong&gt;DCI 方案&lt;/strong&gt;, 即&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>量子光学基础</title>
      <link>https://Muatyz.github.io/posts/exp/quantum-photon/</link>
      <pubDate>Tue, 10 May 2022 00:18:15 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/exp/quantum-photon/</guid>
      <description>&lt;h1 id=&#34;实验目的&#34;&gt;实验目的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;了解量子纠缠态的概念、性质及其在量子信息领域的应用, 进而深刻理解量子力学的本质与精髓;&lt;/li&gt;
&lt;li&gt;学习光子纠缠源的制备原理, 学习相关的非线性光学的知识,  如自发参量放大与振荡、相位匹配、自发参量下转换等;&lt;/li&gt;
&lt;li&gt;学习量子光学实验中涉及的基本实验仪器的原理和使用方法。如光纤传输和耦合的理论与技术, 单光子计数器, 符合门, 半波片, 极化片等实验装置的使用方法。让学生熟练掌握光学实验的光路调节和各种光学元件的调整技术。&lt;/li&gt;
&lt;li&gt;学习对光子纠缠源产生的光子纠缠对比度的符合测量方法, 并通过测量验算Bell 不等式&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;实验原理&#34;&gt;实验原理&lt;/h1&gt;
&lt;h2 id=&#34;量子纠缠态&#34;&gt;量子纠缠态&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在任何量子力学表象中, 都无法表示为组成它的各子系统量子态矢的直积形式.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用塑料闪烁体测量介子的寿命</title>
      <link>https://Muatyz.github.io/posts/exp/muon-lifetime/</link>
      <pubDate>Tue, 10 May 2022 00:18:15 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/exp/muon-lifetime/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;In the experiment, you will learn how to use plastic scientillator to measure lifetime of muon in cosmic ray. The basic particle detection skills will be shown in this activity, including how to using a PMT detector, signal processing methods, and data analysis skills etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;译：&lt;/p&gt;
&lt;p&gt;在这个实验中, 你将学习如何使用塑料科学仪器来测量宇宙射线中 $\mu$ 子的寿命. 在这个活动中, 将展示基本的粒子检测技能, 包括如何使用 PMT 检测器、信号处理方法和数据分析技能等.&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Muon was discovered by Carl D. Anderson in 1936 in studying of cosmic radiation. Just like its cousin electron, muon does not take part in strong interaction, bus has mass roughly 200 times larger than that of electron. Because its short lifetime, the muon from out space normally decay out before they arrive earth. Therefore, muons which come into our laboratory are the results of the interactions between protons and the nuclei in our atmosphere, principally nitrogen, oxygen and argon. At top of the atmosphere, the incoming protons are traveling at relativistic speeds. When they penetrate the atmosphere, many particles like $\pi^{0,\pm}, n, K$, etc. can be created due to the interactions and theirs sequencial reactions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python计算转角石墨烯能带</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/tbg-moireband-python/</link>
      <pubDate>Sun, 08 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/tbg-moireband-python/</guid>
      <description>使用Python编程计算石墨烯能带</description>
    </item>
    
    <item>
      <title>二次量子化与升降算符</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/sec-quantization/</link>
      <pubDate>Sun, 08 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/sec-quantization/</guid>
      <description>考虑多粒子体系时的量子力学</description>
    </item>
    
    <item>
      <title>使用Python绘制转角石墨烯</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/tbg-fig-python/</link>
      <pubDate>Sun, 08 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/tbg-fig-python/</guid>
      <description>Python作为开源社区维护的语言,相较于Matlab等商用语言更不容易受到限制. 本内容有助于锻炼使用python包</description>
    </item>
    
    <item>
      <title>ITensor基础语法说明</title>
      <link>https://Muatyz.github.io/posts/phy/calphy/itensor-mannual/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/calphy/itensor-mannual/</guid>
      <description>介绍以DMRG算法为核心的itensor库使用方法</description>
    </item>
    
    <item>
      <title>ITensor库安装说明</title>
      <link>https://Muatyz.github.io/posts/phy/calphy/itensor-donwload/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/calphy/itensor-donwload/</guid>
      <description>ITensor是依托于Lapack和Blas库的张量计算库, 这也注定其只能在Linux系统上使用(?)</description>
    </item>
    
    <item>
      <title>发源于重整化(Renormalization)的MERA算法</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/mera-method/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/mera-method/</guid>
      <description>多尺度纠缠重整化(MERA)是用以解决量子多体问题的算法之一</description>
    </item>
    
    <item>
      <title>发源于重整化(Renormalization)的MERA算法</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/simsopt/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/simsopt/</guid>
      <description>多尺度纠缠重整化(MERA)是用以解决量子多体问题的算法之一</description>
    </item>
    
    <item>
      <title>哈密顿量的描述方式</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/hamiltonian/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/hamiltonian/</guid>
      <description>哈密顿量可谓是最常使用的算子了, 不同的描绘方法体现出不同的物理背景和思想</description>
    </item>
    
    <item>
      <title>计算物理方法</title>
      <link>https://Muatyz.github.io/posts/phy/calphy/calphy/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/calphy/calphy/</guid>
      <description>计算物理方法总结</description>
    </item>
    
    <item>
      <title>紧束缚模型</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/tight-binding-model/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/tight-binding-model/</guid>
      <description>紧束缚模型是在能带计算中的最基础的方法</description>
    </item>
    
    <item>
      <title>朗道能级</title>
      <link>https://Muatyz.github.io/posts/phy/qp/laundau-energy/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/qp/laundau-energy/</guid>
      <description>电子在均匀磁场中运动时的现象</description>
    </item>
    
    <item>
      <title>强关联模型的基石: Hubbard Model</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/hubbard-model/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/hubbard-model/</guid>
      <description>Hubbard Model 是固体物理的入门知识, 基于能带理论进行推广.</description>
    </item>
    
    <item>
      <title>转角双层石墨烯的数值计算综述</title>
      <link>https://Muatyz.github.io/posts/phy/hcmp/tbg-nu-cal/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/phy/hcmp/tbg-nu-cal/</guid>
      <description>转角双层石墨烯数值计算方法综述</description>
    </item>
    
    <item>
      <title>有趣的网站收藏清单</title>
      <link>https://Muatyz.github.io/posts/life/interesting/</link>
      <pubDate>Thu, 05 May 2022 00:18:15 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/life/interesting/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.huaxuejia.cn/ism/mol/examples/#&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow noreferrer&#34; &gt;扯蛋模型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.yankong.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow noreferrer&#34; &gt;导师评价网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/556543536/answer/3394831411&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow noreferrer&#34; &gt;读博建议&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[中字]Moiré bands in twisted double-layer graphene</title>
      <link>https://Muatyz.github.io/posts/read/stack/moire-bands/</link>
      <pubDate>Thu, 05 May 2022 00:18:06 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/read/stack/moire-bands/</guid>
      <description>&lt;h1 id=&#34;moiré-bands-in-twisted-double-layer-graphene&#34;&gt;Moiré bands in twisted double-layer graphene&lt;/h1&gt;
&lt;p&gt;双层石墨烯出现转角时, 在整体层面会出现摩尔纹.&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A moiré pattern is formed when two copies of a periodic pattern are overlaid with a relative twist.
We address the electronic structure of a twisted two-layer graphene system, showing that in its continuum Dirac model the moiré pattern periodicity leads to moiré Bloch bands.
The two layers become more strongly coupled and the Dirac velocity crosses zero several times as the twist angle is reduced.
For a discrete set of magic angles the velocity vanishes, the lowest moiré band flattens, and the Dirac-point density-of states and the counterflow conductivity are strongly enhanced.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;译:&lt;/p&gt;
&lt;p&gt;当一个周期性图案的两个副本以一定扭转角的方式叠加在一起时, 就会形成摩尔纹图案.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Github基础语法说明</title>
      <link>https://Muatyz.github.io/posts/cs/github-mannual/</link>
      <pubDate>Thu, 05 May 2022 00:17:58 +0800</pubDate>
      
      <guid>https://Muatyz.github.io/posts/cs/github-mannual/</guid>
      <description>使用Visual Studio进行git管理非常方便, 但是不清楚其背后的提交, 合并等原理是不可行的.</description>
    </item>
    
    
    
  </channel>
</rss>
